import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import KFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix


# models -->
from sklearn import linear_model
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.preprocessing import PolynomialFeatures
from sklearn.svm import SVC

train_data = pd.read_csv('data/train.csv')
test_data = pd.read_csv('data/test.csv')
result = pd.read_csv('data/my_submission.csv')


women = train_data.loc[train_data.Sex == 'female']["Survived"]
rate_women = sum(women)/len(women)

men = train_data.loc[train_data.Sex =='male']["Survived"]
rate_men = sum(men)/len(men)

print("perc. of women survived: ", rate_women)
print("perc. of men survived: ",rate_men)

y_train = train_data["Survived"]
y_test = result['Survived']

features = ["Pclass","Sex", "SibSp","Parch"]
X_train = pd.get_dummies(train_data[features])
X_test = pd.get_dummies(test_data[features])

#Polynomial Linear Regression -->
plr = make_pipeline(PolynomialFeatures(degree=3), linear_model.Ridge())
plr.fit(X_train, y_train)

# Random Forest Classifier -->
rf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)
rf.fit(X_train, y_train)

# Gradient boosting regressor -->
gbc = make_pipeline(StandardScaler(), GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0))
gbc.fit(X_train, y_train)

# Support Vector classification -->
svc = make_pipeline(StandardScaler(), SVC(gamma="auto"))
svc.fit(X_train,y_train)

#analysis

# Classification Report
print(classification_report(y_test, gbc.predict(X_test)))
print()
print('confusion_matrix: \n {}'.format(confusion_matrix(y_test, gbc.predict(X_test))))
print()
print('gradient boosted classifier: {}'.format(gbc.score(X_test, y_test)))
print()

print(classification_report(y_test, rf.predict(X_test)))
print()
print('confusion_matrix: \n {}'.format(confusion_matrix(y_test,rf.predict(X_test))))
print()
print('random forest score: {}'.format(rf.score(X_test,y_test)))
print()

print(classification_report(y_test, svc.predict(X_test)))
print()
print('confusion_matrix: \n {}'.format(confusion_matrix(y_test,svc.predict(X_test))))
print()
print('support vector score: {}'.format(svc.score(X_test,y_test)))
print()
